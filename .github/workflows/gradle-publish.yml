name: Gradle Build and Publish to GitHub Packages

on:
  push:
    tags: ['v*']

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}

      - name: Remove 'v' prefix from tag
        id: trim_tag
        run: echo "TAG_NAME=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep '^v' | grep -v "${GITHUB_REF_NAME}" | head -n 1 || echo "")
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate categorized CHANGELOG.md
        id: changelog
        run: |
          TAG=${{ steps.trim_tag.outputs.TAG_NAME }}
          echo "## $TAG" > CHANGELOG.md
          echo >> CHANGELOG.md
          if [ -z "${{ steps.prev_tag.outputs.PREV_TAG }}" ]; then
            RANGE="HEAD"
          else
            RANGE="${{ steps.prev_tag.outputs.PREV_TAG }}..HEAD"
          fi
          for TYPE in feat fix chore docs refactor test style perf ci build revert init; do
            COMMITS=$(git log $RANGE --pretty=format:"%s" | grep "^$TYPE:") || true
            if [ -n "$COMMITS" ]; then
              echo "### ðŸ”¹ ${TYPE^}" >> CHANGELOG.md
              echo "$COMMITS" | sed 's/^/- /' >> CHANGELOG.md
              echo >> CHANGELOG.md
            fi
          done
          if ! grep -q "^### ðŸ”¹" CHANGELOG.md; then
            echo "### ðŸ”¹ Other" >> CHANGELOG.md
            git log $RANGE --pretty=format:"%s" | sed 's/^/- /' >> CHANGELOG.md
          fi
          echo "BODY<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload JAR to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ steps.trim_tag.outputs.TAG_NAME }}
          body: |
            ðŸŽ‰ **ë²„ì „ ${{ steps.trim_tag.outputs.TAG_NAME }} ë¦´ë¦¬ì¦ˆ**

            ${{ steps.changelog.outputs.BODY }}
          files: build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit CHANGELOG.md to update branch
        run: |
          git config user.name "hzn"
          git config user.email "hzn.devs@gmail.com"
          git checkout -b changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }}
          git add CHANGELOG.md
          git diff --cached --quiet && echo "No changes to commit." && exit 0
          git commit -m "docs: update CHANGELOG for ${{ steps.trim_tag.outputs.TAG_NAME }}"
          git push origin changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }}

      - name: Check if update branch differs from main
        id: changelog_diff
        run: |
          git fetch origin main
          BASE=$(git merge-base origin/main origin/changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }})
          git diff --quiet $BASE..origin/changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }} -- CHANGELOG.md \
            && echo "CHANGES=false" >> $GITHUB_OUTPUT \
            || echo "CHANGES=true" >> $GITHUB_OUTPUT
          
      - name: Ensure labels exist
        run: |
          gh label create changelog --description "Changelog updates" --color FFCE00 || true
          gh label create automated --description "Automated PR" --color 666666 || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create & merge PR to main using gh cli
        if: steps.changelog_diff.outputs.CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh pr create \
            --head changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }} \
            --base main \
            --title "docs: update CHANGELOG for ${{ steps.trim_tag.outputs.TAG_NAME }}" \
            --body "This PR contains the autogenerated changelog for version ${{ steps.trim_tag.outputs.TAG_NAME }}." \
            --label changelog --label automated
          
          gh pr merge changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }} \
            --squash --delete-branch --yes
