name: Gradle Build and Publish to GitHub Packages

on:
  push:
    tags: ['v*']

permissions:
  packages: write
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}

      - name: Remove 'v' prefix from tag for release name
        id: trim_tag
        run: echo "TAG_NAME=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Get previous tag safely
        id: prev_tag
        run: |
          if git rev-parse HEAD^1 >/dev/null 2>&1; then
            echo "PREV_TAG=$(git describe --tags --abbrev=0 HEAD^1)" >> $GITHUB_OUTPUT
          else
            echo "PREV_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          fi

      - name: Generate categorized CHANGELOG.md
        id: changelog
        run: |
          TAG=${{ steps.trim_tag.outputs.TAG_NAME }}
          echo "## $TAG" > CHANGELOG.md
          echo >> CHANGELOG.md
          for TYPE in feat fix chore docs refactor test style perf build ci; do
            COMMITS=$(git log ${{ steps.prev_tag.outputs.PREV_TAG }}..HEAD --pretty=format:"%s" | grep "^$TYPE:") || true
            if [ -n "$COMMITS" ]; then
              echo "### ðŸ”¹ ${TYPE^}" >> CHANGELOG.md
              echo "$COMMITS" | sed 's/^/- /' >> CHANGELOG.md
              echo >> CHANGELOG.md
            fi
          done
          echo "BODY<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create update branch and commit CHANGELOG.md
        run: |
          git config user.name "hzn"
          git config user.email "hzn.devs@gmail.com"
          git checkout -b changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }}
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for ${{ steps.trim_tag.outputs.TAG_NAME }}"
          git push origin changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }}

      - name: Check if CHANGELOG.md differs from main
        id: changelog_diff
        run: |
          git fetch origin main
          BASE=$(git merge-base origin/main origin/changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }})
          git diff --quiet $BASE..origin/changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }} -- CHANGELOG.md \
            && echo "CHANGES=false" >> $GITHUB_OUTPUT \
            || echo "CHANGES=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request for CHANGELOG update
        if: steps.changelog_diff.outputs.CHANGES == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: changelog/update-${{ steps.trim_tag.outputs.TAG_NAME }}
          title: "docs: update CHANGELOG for ${{ steps.trim_tag.outputs.TAG_NAME }}"
          body: "This PR contains the autogenerated changelog update for version ${{ steps.trim_tag.outputs.TAG_NAME }}."
          base: main
          labels: changelog, automated
          reviewers: hzn
          draft: false

      - name: Auto-merge the PR
        if: steps.changelog_diff.outputs.CHANGES == 'true'
        run: |
          gh pr merge ${{ steps.cpr.outputs.pull-request-url }} --squash --delete-branch --admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete release branch
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          BRANCH=release/${GITHUB_REF_NAME}
          git push origin --delete $BRANCH || echo "branch not found"
